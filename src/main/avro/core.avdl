@namespace("org.spf4j.base.avro")
protocol Core {

   /** record representing a jar archive info */
    record JPackageInfo {
      /** the package url */
      string url = "";
      /** version from manifest  */
      string version = "";
    }

    /** a location in a file */
    record JFileLocation {
      /** file name */
      string fileName;
      /** line number */
      int lineNumber;
    }

    /** record representing the samples where a particular method was executed */
    record JStackTraceElement {
      /** java class name */
      string className;
      /** java method name */
      string methodName;
      /** location, null when location not available */
      union {null, JFileLocation} location;
      /** package info, null when package info not available */
      union {null, JPackageInfo} packageInfo;
    }

    /** a throwable */
    record JThrowable {
      /** exception class name */
      string className;
      /** exception message, can be null just like java exceptions */
      union { null, string } message = null;
      /** the stack trace */
      array<JStackTraceElement> stackTrace = [];
      /** exception cause, null when there is not cause */
      union {null, JThrowable} cause = null;
      /** suppressed exceptions */
      array<JThrowable> suppressed = [];
    }

    /** a log record */
    record ALogRecord {
      /** trace id */
      string trId = "";
      /** log record timestamp*/
      @logicalType("instant")
      string ts;
      /** logger name */
      string logger;
      /** thread name */
      string thr;
      /** log message */
      string msg;
      /** a optional throwable, null when none */
      union {null, JThrowable} throwable = null;
      /** extra log message payload */
      @logicalType("json_array")
      bytes xtra;
    }

    /** a record that describes debug detail */
    record DebugDetail {
      /** origin detail */
      string origin = "";

      /** logs */
      array<ALogRecord> logs = [];

      /** a optional throwable, null when none */
      union {null, JThrowable} throwable = null;
    }

    /** a record to describe a service error */
    record ServiceError {
      /** a error code, efaults to internal serve error */
      int code = 500;
      /** a tring describing the type of the error, ex: the exception type */
      string type = "";
      /** a error message */
      string message;
      /**
       * optional (when null) debug detail, will be missing when:
       * a client does not desire it.
       * when  client is  not entitled to access it.
       * across security boundaries.
       */
      union {null, DebugDetail} detail = null;
    }
}