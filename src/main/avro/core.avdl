@namespace("org.spf4j.base.avro")
protocol Core {

    /** a instant type */
    @logicalType("instant")
    record Instant {
      /** nr seconds since UNIX epoch */
      long epochSecond;
      /** nanosecond component */
      int nano;
    }

    /** Any type */
    @logicalType("any")
    record Any {
      /** the avro schema of this object */
      string avsc;
      /** the content serializes as avro binary according to the schema from the avsc field */
      bytes content;
    }

    /**
     * record representing a method, it is not uniquely identifying a method, since
     * methods can be overloaded with different arguments
     */
    @Immutable
    record Method {
      /** the declaring class of the method. */
      string declaringClass;
      /** the name of the method */
      string name;
    }

    /** record representing the samples where a particular method was executed */
    record StackSampleElement {
      /** the id of the sample */
      int id;
      /** the parent sample where current method was executed from. -1 for root */
      int parentId;
      /** the number of time this records method has been caught in execution */
      int count;
      /** the method caught in execution */
      Method method;
    }

    /** Some stack samples */
    record StackSamples {
      /** the collection of samples */
      array<StackSampleElement> stackSamples = [];
    }


    /** record representing a package(jar) archive info */
    @beta
    record PackageInfo {
      /** the package location url */
      string url = "";
      /** package version from manifest  */
      string version = "";
    }

    /** a location in a file */
    @beta
    record FileLocation {
      /** file name */
      string fileName;
      /** line number, -1 when not available */
      int lineNumber = -1;
      /** column number, -1 when not available */
      int columnNumber = -1;
    }

    /** record representing a Stack trace. */
    @beta
    record StackTraceElement {
      /** the method of the stack trace element */
      Method method;
      /** location, null when location not available */
      union {null, FileLocation} location = null;
      /** package info, null when package info not available */
      union {null, PackageInfo} packageInfo = null;
    }

    /** a throwable (Exception) */
    @beta
    record Throwable {
      /** exception class name */
      string className;
      /** exception message, java exceptions will null message will have this as empty string */
      string message = "";
      /** the stack trace */
      array<StackTraceElement> stackTrace = [];
      /** exception cause, null when there is not cause */
      union {null, Throwable} cause = null;
      /** suppressed exceptions */
      array<Throwable> suppressed = [];
    }

    /** A log level, semantics in line with slf4j */
    enum LogLevel {
      UNKNOWN,
      TRACE,
      DEBUG,
      INFO,
      WARN,
      ERROR
    } = UNKNOWN;

    /** a log record */
    @beta
    @Mutable
    record LogRecord {
      /** origin of the log */
      string origin = "";
      /** trace id, empty string for none */
      string trId = "";
      /** Log level */
      LogLevel level = "UNKNOWN";
      /** log record timestamp*/
      @logicalType("instant")
      string ts;
      /** logger name */
      string logger;
      /** thread name */
      string thr;
      /** log message */
      string msg;
      /** a optional throwable, null when none */
      union {null, Throwable} throwable = null;
      /** extra log message payload */
      @logicalType("json_array")
      string xtra;
    }

    /** a record that describes debug detail */
    @beta
    record DebugDetail {
      /** origin detail */
      string origin = "";

      /** logs */
      array<LogRecord> logs = [];

      /** a optional throwable, null when none */
      union {null, Throwable} throwable = null;

      /** Stack samples if available */
      array<StackSampleElement> stackSamples = [];
    }

    /** a record to describe a service error */
    @beta
    record ServiceError {
      /** a error code, efaults to internal serve error */
      int code = 500;
      /** a tring describing the type of the error, ex: the exception type */
      string type = "";
      /** a error message */
      string message;
      /** additional structured information regarding this error, null if no additional info is provided */
      union {null, Any} payload = null;
      /**
       * optional (when null) debug detail, will be missing when:
       * a client does not desire it.
       * when  client is  not entitled to access it.
       * across security boundaries.
       */
      union {null, DebugDetail} detail = null;
    }




}